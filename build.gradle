plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2020.3.2"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

tasks.register("update_version") {
  def versionPropsFile = file('src/main/resources/version.properties')
  def versionBuild
  def gitHash

  def getGitHash = { ->
      def stdout = new ByteArrayOutputStream()
      exec {
          commandLine 'git', 'rev-parse', 'HEAD'
          standardOutput = stdout
      }
      return stdout.toString().trim()
  }

  def getGitBranch = { ->
      def stdout = new ByteArrayOutputStream()
      exec {
          commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
          standardOutput = stdout
      }
      return stdout.toString().trim()
  }

  def getGitStatus = { ->
      def stdout = new ByteArrayOutputStream()
      exec {
          commandLine 'git', 'status'
          standardOutput = stdout
      }
      return stdout.toString().trim()
  }

  doLast {
	mkdir("src/main/resources")
        ant.touch(file:"src/main/resources/version.properties")
        if (versionPropsFile.canRead()) {
            def Properties versionProps = new Properties()
            versionProps.load(new FileInputStream(versionPropsFile))
            if (versionProps['VERSION_BUILD'] == null) {
                versionBuild = 1
            } else {
                versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
            }
            versionProps['VERSION_BUILD'] = versionBuild.toString()

            gitHash = getGitHash()
            versionProps['GIT_HASH'] = gitHash
            versionProps['GIT_BRANCH'] = getGitBranch()
            versionProps['BUILD_TIME'] = (new Date()).toString()
            versionProps['BUILD_STATUS'] = getGitStatus()

            versionProps.store(versionPropsFile.newWriter(), null)
        } else {
            throw new FileNotFoundException("Could not read version.properties!")
        }
  }
}

tasks.named("deploy") {
  dependsOn("update_version")
}

// Set this to true to enable desktop support.
def includeDesktopSupport = false

repositories { jcenter() }

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation wpi.deps.wpilib()
    nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.wpilibJni(wpi.platforms.desktop)


    implementation wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:3.2.4'

    // Enable simulation gui support. Must check the box in vscode to enable support
    // upon debugging
    simulation wpi.deps.sim.gui(wpi.platforms.desktop, false)
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}
